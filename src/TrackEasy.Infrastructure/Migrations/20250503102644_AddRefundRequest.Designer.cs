// <auto-generated />
using System;
using System.Collections.Generic;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using TrackEasy.Infrastructure.Database;

#nullable disable

namespace TrackEasy.Infrastructure.Migrations
{
    [DbContext(typeof(TrackEasyDbContext))]
    [Migration("20250503102644_AddRefundRequest")]
    partial class AddRefundRequest
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole<System.Guid>", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("TrackEasy.Domain.Cities.City", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Country")
                        .HasColumnType("int");

                    b.PrimitiveCollection<string>("FunFacts")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.ToTable("Cities", (string)null);
                });

            modelBuilder.Entity("TrackEasy.Domain.Coaches.Coach", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)");

                    b.Property<Guid?>("OperatorId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("OperatorId");

                    b.ToTable("Coaches", (string)null);
                });

            modelBuilder.Entity("TrackEasy.Domain.Connections.Connection", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsActivated")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)");

                    b.Property<Guid>("OperatorId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("TrainId")
                        .HasColumnType("uniqueidentifier");

                    b.ComplexProperty<Dictionary<string, object>>("PricePerKilometer", "TrackEasy.Domain.Connections.Connection.PricePerKilometer#Money", b1 =>
                        {
                            b1.IsRequired();

                            b1.Property<decimal>("Amount")
                                .HasColumnType("decimal(18,2)");

                            b1.Property<int>("Currency")
                                .HasColumnType("int");
                        });

                    b.HasKey("Id");

                    b.HasIndex("OperatorId");

                    b.HasIndex("TrainId");

                    b.ToTable("Connections", (string)null);
                });

            modelBuilder.Entity("TrackEasy.Domain.DiscountCodes.DiscountCode", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("From")
                        .HasColumnType("datetime2");

                    b.Property<int>("Percentage")
                        .HasColumnType("int");

                    b.Property<DateTime>("To")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("DiscountCodes", (string)null);
                });

            modelBuilder.Entity("TrackEasy.Domain.Discounts.Discount", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("Percentage")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Discounts", (string)null);
                });

            modelBuilder.Entity("TrackEasy.Domain.Managers.Manager", b =>
                {
                    b.Property<Guid>("OperatorId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("OperatorId", "UserId");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("Managers", (string)null);
                });

            modelBuilder.Entity("TrackEasy.Domain.Notifications.Notification", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Notifications", (string)null);
                });

            modelBuilder.Entity("TrackEasy.Domain.Operators.Operator", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(3)
                        .HasColumnType("nvarchar(3)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.ToTable("Operators", (string)null);
                });

            modelBuilder.Entity("TrackEasy.Domain.RefundRequests.RefundRequest", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Reason")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<Guid>("TicketId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("TicketId");

                    b.ToTable("RefundRequests", (string)null);
                });

            modelBuilder.Entity("TrackEasy.Domain.Stations.Station", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CityId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.ComplexProperty<Dictionary<string, object>>("GeographicalCoordinates", "TrackEasy.Domain.Stations.Station.GeographicalCoordinates#GeographicalCoordinates", b1 =>
                        {
                            b1.IsRequired();

                            b1.Property<int>("Latitude")
                                .HasColumnType("int");

                            b1.Property<int>("Longitude")
                                .HasColumnType("int");
                        });

                    b.HasKey("Id");

                    b.HasIndex("CityId");

                    b.ToTable("Stations", (string)null);
                });

            modelBuilder.Entity("TrackEasy.Domain.Tickets.Ticket", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("CanceledAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("ConnectionId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ConnectionName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("OperatorCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("OperatorId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("OperatorName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("PaidAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("PassengerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("RefundedAt")
                        .HasColumnType("datetime2");

                    b.PrimitiveCollection<string>("SeatNumbers")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("TicketNumber")
                        .HasColumnType("int");

                    b.Property<int>("TicketStatus")
                        .HasColumnType("int");

                    b.Property<Guid?>("TransactionId")
                        .HasColumnType("uniqueidentifier");

                    b.ComplexProperty<Dictionary<string, object>>("Price", "TrackEasy.Domain.Tickets.Ticket.Price#Money", b1 =>
                        {
                            b1.IsRequired();

                            b1.Property<decimal>("Amount")
                                .HasColumnType("decimal(18,2)");

                            b1.Property<int>("Currency")
                                .HasColumnType("int");
                        });

                    b.HasKey("Id");

                    b.ToTable("Tickets", (string)null);
                });

            modelBuilder.Entity("TrackEasy.Domain.Trains.Train", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)");

                    b.Property<Guid?>("OperatorId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("OperatorId");

                    b.ToTable("Trains", (string)null);
                });

            modelBuilder.Entity("TrackEasy.Domain.Users.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateOnly?>("DateOfBirth")
                        .HasColumnType("date");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FirstName")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("LastName")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole<System.Guid>", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.HasOne("TrackEasy.Domain.Users.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.HasOne("TrackEasy.Domain.Users.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole<System.Guid>", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TrackEasy.Domain.Users.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.HasOne("TrackEasy.Domain.Users.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("TrackEasy.Domain.Coaches.Coach", b =>
                {
                    b.HasOne("TrackEasy.Domain.Operators.Operator", null)
                        .WithMany("Coaches")
                        .HasForeignKey("OperatorId");

                    b.OwnsMany("TrackEasy.Domain.Coaches.Seat", "Seats", b1 =>
                        {
                            b1.Property<Guid>("CoachId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<int>("Id")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("int");

                            SqlServerPropertyBuilderExtensions.UseIdentityColumn(b1.Property<int>("Id"));

                            b1.Property<int>("Number")
                                .HasColumnType("int");

                            b1.HasKey("CoachId", "Id");

                            b1.ToTable("Seats", (string)null);

                            b1.WithOwner()
                                .HasForeignKey("CoachId");
                        });

                    b.Navigation("Seats");
                });

            modelBuilder.Entity("TrackEasy.Domain.Connections.Connection", b =>
                {
                    b.HasOne("TrackEasy.Domain.Operators.Operator", "Operator")
                        .WithMany()
                        .HasForeignKey("OperatorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TrackEasy.Domain.Trains.Train", "Train")
                        .WithMany()
                        .HasForeignKey("TrainId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsOne("TrackEasy.Domain.Connections.Schedule", "Schedule", b1 =>
                        {
                            b1.Property<Guid>("ConnectionId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<DateOnly>("ValidFrom")
                                .HasColumnType("date");

                            b1.Property<DateOnly>("ValidTo")
                                .HasColumnType("date");

                            b1.HasKey("ConnectionId");

                            b1.ToTable("Schedules", (string)null);

                            b1.WithOwner()
                                .HasForeignKey("ConnectionId");
                        });

                    b.OwnsMany("TrackEasy.Domain.Connections.ConnectionStation", "Stations", b1 =>
                        {
                            b1.Property<Guid>("Id")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<TimeOnly?>("ArrivalTime")
                                .HasColumnType("time");

                            b1.Property<Guid>("ConnectionId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<TimeOnly?>("DepartureTime")
                                .HasColumnType("time");

                            b1.Property<int>("SequenceNumber")
                                .HasColumnType("int");

                            b1.Property<Guid>("StationId")
                                .HasColumnType("uniqueidentifier");

                            b1.HasKey("Id");

                            b1.HasIndex("ConnectionId");

                            b1.HasIndex("StationId");

                            b1.ToTable("ConnectionStations", (string)null);

                            b1.WithOwner()
                                .HasForeignKey("ConnectionId");

                            b1.HasOne("TrackEasy.Domain.Stations.Station", "Station")
                                .WithMany()
                                .HasForeignKey("StationId")
                                .OnDelete(DeleteBehavior.NoAction)
                                .IsRequired();

                            b1.Navigation("Station");
                        });

                    b.OwnsOne("TrackEasy.Domain.Connections.ConnectionRequest", "Request", b1 =>
                        {
                            b1.Property<Guid>("Id")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<int>("RequestType")
                                .HasColumnType("int");

                            b1.HasKey("Id");

                            b1.ToTable("ConnectionRequests", (string)null);

                            b1.WithOwner()
                                .HasForeignKey("Id");

                            b1.OwnsOne("TrackEasy.Domain.Connections.Schedule", "Schedule", b2 =>
                                {
                                    b2.Property<Guid>("ConnectionRequestId")
                                        .HasColumnType("uniqueidentifier");

                                    b2.Property<DateOnly>("ValidFrom")
                                        .HasColumnType("date");

                                    b2.Property<DateOnly>("ValidTo")
                                        .HasColumnType("date");

                                    b2.HasKey("ConnectionRequestId");

                                    b2.ToTable("ConnectionRequestsSchedules", (string)null);

                                    b2.WithOwner()
                                        .HasForeignKey("ConnectionRequestId");
                                });

                            b1.OwnsMany("TrackEasy.Domain.Connections.ConnectionStation", "Stations", b2 =>
                                {
                                    b2.Property<Guid>("Id")
                                        .HasColumnType("uniqueidentifier");

                                    b2.Property<TimeOnly?>("ArrivalTime")
                                        .HasColumnType("time");

                                    b2.Property<Guid>("ConnectionRequestId")
                                        .HasColumnType("uniqueidentifier");

                                    b2.Property<TimeOnly?>("DepartureTime")
                                        .HasColumnType("time");

                                    b2.Property<int>("SequenceNumber")
                                        .HasColumnType("int");

                                    b2.Property<Guid>("StationId")
                                        .HasColumnType("uniqueidentifier");

                                    b2.HasKey("Id");

                                    b2.HasIndex("ConnectionRequestId");

                                    b2.HasIndex("StationId");

                                    b2.ToTable("ConnectionRequestsStations", (string)null);

                                    b2.WithOwner()
                                        .HasForeignKey("ConnectionRequestId");

                                    b2.HasOne("TrackEasy.Domain.Stations.Station", "Station")
                                        .WithMany()
                                        .HasForeignKey("StationId")
                                        .OnDelete(DeleteBehavior.NoAction)
                                        .IsRequired();

                                    b2.Navigation("Station");
                                });

                            b1.Navigation("Schedule");

                            b1.Navigation("Stations");
                        });

                    b.Navigation("Operator");

                    b.Navigation("Request");

                    b.Navigation("Schedule")
                        .IsRequired();

                    b.Navigation("Stations");

                    b.Navigation("Train");
                });

            modelBuilder.Entity("TrackEasy.Domain.Managers.Manager", b =>
                {
                    b.HasOne("TrackEasy.Domain.Operators.Operator", "Operator")
                        .WithMany("Managers")
                        .HasForeignKey("OperatorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TrackEasy.Domain.Users.User", "User")
                        .WithOne()
                        .HasForeignKey("TrackEasy.Domain.Managers.Manager", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Operator");

                    b.Navigation("User");
                });

            modelBuilder.Entity("TrackEasy.Domain.Notifications.Notification", b =>
                {
                    b.HasOne("TrackEasy.Domain.Users.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("TrackEasy.Domain.RefundRequests.RefundRequest", b =>
                {
                    b.HasOne("TrackEasy.Domain.Tickets.Ticket", "Ticket")
                        .WithMany()
                        .HasForeignKey("TicketId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Ticket");
                });

            modelBuilder.Entity("TrackEasy.Domain.Stations.Station", b =>
                {
                    b.HasOne("TrackEasy.Domain.Cities.City", "City")
                        .WithMany()
                        .HasForeignKey("CityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("City");
                });

            modelBuilder.Entity("TrackEasy.Domain.Tickets.Ticket", b =>
                {
                    b.OwnsMany("TrackEasy.Domain.Tickets.Person", "Passengers", b1 =>
                        {
                            b1.Property<Guid>("TicketId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<int>("Id")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("int");

                            SqlServerPropertyBuilderExtensions.UseIdentityColumn(b1.Property<int>("Id"));

                            b1.Property<DateOnly>("DateOfBirth")
                                .HasColumnType("date");

                            b1.Property<string>("Discount")
                                .HasMaxLength(50)
                                .HasColumnType("nvarchar(50)");

                            b1.Property<string>("FirstName")
                                .IsRequired()
                                .HasMaxLength(50)
                                .HasColumnType("nvarchar(50)");

                            b1.Property<string>("LastName")
                                .IsRequired()
                                .HasMaxLength(50)
                                .HasColumnType("nvarchar(50)");

                            b1.HasKey("TicketId", "Id");

                            b1.ToTable("People", (string)null);

                            b1.WithOwner()
                                .HasForeignKey("TicketId");
                        });

                    b.OwnsMany("TrackEasy.Domain.Tickets.TicketConnectionStation", "Stations", b1 =>
                        {
                            b1.Property<Guid>("TicketId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<int>("Id")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("int");

                            SqlServerPropertyBuilderExtensions.UseIdentityColumn(b1.Property<int>("Id"));

                            b1.Property<TimeOnly?>("ArrivalTime")
                                .HasColumnType("time");

                            b1.Property<TimeOnly?>("DepartureTime")
                                .HasColumnType("time");

                            b1.Property<string>("Name")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)");

                            b1.Property<int>("SequenceNumber")
                                .HasColumnType("int");

                            b1.HasKey("TicketId", "Id");

                            b1.ToTable("TicketConnectionStations", (string)null);

                            b1.WithOwner()
                                .HasForeignKey("TicketId");
                        });

                    b.Navigation("Passengers");

                    b.Navigation("Stations");
                });

            modelBuilder.Entity("TrackEasy.Domain.Trains.Train", b =>
                {
                    b.HasOne("TrackEasy.Domain.Operators.Operator", null)
                        .WithMany("Trains")
                        .HasForeignKey("OperatorId");

                    b.OwnsMany("TrackEasy.Domain.Trains.TrainCoach", "Coaches", b1 =>
                        {
                            b1.Property<Guid>("Id")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<Guid>("CoachId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<int>("Number")
                                .HasColumnType("int");

                            b1.Property<Guid>("TrainId")
                                .HasColumnType("uniqueidentifier");

                            b1.HasKey("Id");

                            b1.HasIndex("CoachId")
                                .IsUnique();

                            b1.HasIndex("TrainId");

                            b1.ToTable("TrainCoaches", (string)null);

                            b1.HasOne("TrackEasy.Domain.Coaches.Coach", "Coach")
                                .WithOne()
                                .HasForeignKey("TrackEasy.Domain.Trains.Train.Coaches#TrackEasy.Domain.Trains.TrainCoach", "CoachId")
                                .OnDelete(DeleteBehavior.Cascade)
                                .IsRequired();

                            b1.WithOwner()
                                .HasForeignKey("TrainId");

                            b1.Navigation("Coach");
                        });

                    b.Navigation("Coaches");
                });

            modelBuilder.Entity("TrackEasy.Domain.Operators.Operator", b =>
                {
                    b.Navigation("Coaches");

                    b.Navigation("Managers");

                    b.Navigation("Trains");
                });
#pragma warning restore 612, 618
        }
    }
}
